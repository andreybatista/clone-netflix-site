{"version":3,"sources":["Tmdb.js","components/MovieRow.js","components/FeatureMovie.js","components/Header.js","App.js","index.js"],"names":["API_KEY","basicFetch","endpoint","a","fetch","req","json","getHomeList","slug","title","items","getMovieInfo","movieId","type","info","useState","scrollX","setScrollX","className","onClick","x","Math","round","window","innerWidth","style","fontSize","listW","results","length","marginLeft","width","map","item","key","src","poster_path","alt","original_title","firstDate","Date","first_air_date","genres","i","push","name","description","overview","substring","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","console","log","undefined","original_name","vote_average","getFullYear","release_date","split","reverse","join","number_of_seasons","href","id","black","movieList","setMovieList","featureData","setFeatureData","blackHeader","setBlackHeader","useEffect","LoadAll","Tmdb","list","originals","filter","randomChosen","floor","random","chosen","media_type","chosenInfo","scrollListener","scrollY","addEventListener","removeEventListener","role","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.697d6966.chunk.js","sourcesContent":["const API_KEY = \"21236d94cdc569116676953454fd30e8\";\r\nconst API_BASE = \"https://api.themoviedb.org/3\";\r\n\r\n/*\r\n- originais da netflix\r\n- recomendados (trending)\r\n- em alta (top rated)\r\n- ação\r\n- comédia\r\n- terror\r\n- romance\r\n- documentários\r\n*/\r\n\r\nconst basicFetch = async (endpoint) => {\r\n  const req = await fetch(`${API_BASE}${endpoint}`);\r\n  const json = await req.json();\r\n  return json;\r\n};\r\n\r\nexport default {\r\n  getHomeList: async () => {\r\n    return [\r\n      {\r\n        slug: \"originals\",\r\n        title: \"Originais do Netflix\",\r\n        items: await basicFetch(\r\n          `/discover/tv?with_networks=213?language=pt-BR&api_key=${API_KEY}`\r\n        ),\r\n      },\r\n      {\r\n        slug: \"trending\",\r\n        title: \"Recomendados para Você\",\r\n        items: await basicFetch(\r\n          `/trending/all/week?language=pt-BR&api_key=${API_KEY}`\r\n        ),\r\n      },\r\n      {\r\n        slug: \"toprated\",\r\n        title: \"Em Alta\",\r\n        items: await basicFetch(\r\n          `/movie/top_rated?language=pt-BR&api_key=${API_KEY}`\r\n        ),\r\n      },\r\n      {\r\n        slug: \"action\",\r\n        title: \"Ação\",\r\n        items: await basicFetch(\r\n          `/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`\r\n        ),\r\n      },\r\n      {\r\n        slug: \"comedy\",\r\n        title: \"Comédia\",\r\n        items: await basicFetch(\r\n          `/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`\r\n        ),\r\n      },\r\n      {\r\n        slug: \"horror\",\r\n        title: \"Terror\",\r\n        items: await basicFetch(\r\n          `/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`\r\n        ),\r\n      },\r\n      {\r\n        slug: \"romance\",\r\n        title: \"Romance\",\r\n        items: await basicFetch(\r\n          `/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`\r\n        ),\r\n      },\r\n      {\r\n        slug: \"documentary\",\r\n        title: \"Documentários\",\r\n        items: await basicFetch(\r\n          `/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`\r\n        ),\r\n      },\r\n    ];\r\n  },\r\n  getMovieInfo: async (movieId, type) => {\r\n    let info = {};\r\n\r\n    if (movieId) {\r\n      switch (type) {\r\n        case \"movie\":\r\n          info = await basicFetch(\r\n            `/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`\r\n          );\r\n          break;\r\n\r\n        case \"tv\":\r\n          info = await basicFetch(\r\n            `/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`\r\n          );\r\n          break;\r\n\r\n        default:\r\n          info = null;\r\n          break;\r\n      }\r\n    }\r\n\r\n    return info;\r\n  },\r\n};\r\n","import React, { useState } from \"react\";\r\nimport NavigateBeforeIcon from \"@mui/icons-material/NavigateBefore\";\r\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\r\n\r\nimport \"./MovieRow.css\";\r\n\r\nexport default ({ title, items }) => {\r\n  const [scrollX, setScrollX] = useState(0);\r\n\r\n  const handleLeftArrow = () => {\r\n    let x = scrollX + Math.round(window.innerWidth);\r\n    if(x > 0) {\r\n      x = 0;\r\n    }\r\n    setScrollX(x);\r\n  };\r\n  const handleRigthArrow = () => {\r\n    let x = scrollX - Math.round(window.innerWidth);\r\n    let listW = items.results.length * 150;\r\n    if((window.innerWidth - listW) > x) {\r\n      x = (window.innerWidth - listW) - 60;\r\n    }\r\n    setScrollX(x);\r\n  };\r\n\r\n  return (\r\n    <div className=\"movieRow\">\r\n      <h2>{title}</h2>\r\n      <div className=\"movieRow--left\" onClick={handleLeftArrow}>\r\n        <NavigateBeforeIcon style={{ fontSize: 50 }} />\r\n      </div>\r\n      <div className=\"movieRow--rigth\" onClick={handleRigthArrow}>\r\n        <NavigateNextIcon style={{ fontSize: 50 }} />\r\n      </div>\r\n\r\n      <div className=\"movieRow--listarea\">\r\n        <div\r\n          className=\"movieRow--list\"\r\n          style={{\r\n            marginLeft: scrollX,\r\n            width: items.results.length * 150,\r\n          }}\r\n        >\r\n          {items.results?.length > 0 &&\r\n            items.results.map((item, key) => (\r\n              <div key={key} className=\"movieRow--item\">\r\n                <img\r\n                  src={`https://image.tmdb.org/t/p/w300${item.poster_path}`}\r\n                  alt={item.original_title}\r\n                />\r\n              </div>\r\n            ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport \"./FeatureMovie.css\";\r\n\r\nexport default ({ item }) => {\r\n  let firstDate = new Date(item.first_air_date);\r\n\r\n  let genres = [];\r\n  for (let i in item.genres) {\r\n    genres.push(item.genres[i].name);\r\n  }\r\n\r\n  let description = item.overview;\r\n  if(description.length > 200) {\r\n    description = description.substring(0, 200)  + \"...\";\r\n  }\r\n\r\n  return (\r\n    <section\r\n      className=\"featured\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundPosition: \"center\",\r\n        backgroundImage: `url( https://image.tmdb.org/t/p/original${item.backdrop_path})`,\r\n      }}\r\n    >\r\n      <div className=\"featured--vertical\">\r\n        <div className=\"featured--horizontal\">\r\n          {console.log(item)}\r\n          <div className=\"featured--name\">\r\n            {item.original_name === undefined\r\n              ? item.original_title\r\n              : item.original_name}\r\n          </div>\r\n          <div className=\"feature--name-traduzido\">\r\n            {item.name === undefined ? item.title : item.name}\r\n          </div>\r\n          <div className=\"featured--info\">\r\n            <div className=\"featured--points\">{item.vote_average} pontos</div>\r\n\r\n            <div className=\"featured--year\">\r\n              {item.first_air_date === undefined\r\n                ? \"\"\r\n                : firstDate.getFullYear() !== null\r\n                ? firstDate.getFullYear()\r\n                : \"\"}\r\n            </div>\r\n            <div className=\"featured--release\">\r\n              {item.release_date === undefined\r\n                ? \"\"\r\n                : 'Lançamento: ' + item.release_date.split(\"-\").reverse().join('/')}\r\n              {/*item.release_date === undefined ? \"\" : releaseDate.getFullYear()*/}\r\n            </div>\r\n\r\n            <div className=\"featured--seasons\">\r\n              {item.number_of_seasons}\r\n\r\n              {item.number_of_seasons !== undefined ? \" temporada\" : \"\"}\r\n\r\n              {item.number_of_seasons !== 1 && undefined ? \"s\" : \"\"}\r\n            </div>\r\n          </div>\r\n          <div className=\"featured--description\">{item.description}</div>\r\n          <div className=\"featured--buttons\">\r\n            <a className=\"featured--watchbutton\" href={`/watch/${item.id}`}>\r\n              Assistir\r\n            </a>\r\n            <a className=\"featured--mylistbutton\" href={`/list/add/${item.id}`}>\r\n              + Minha Lista\r\n            </a>\r\n          </div>\r\n          <div className=\"featured--genres\">\r\n            <strong>Gêneros: </strong>\r\n            {genres.join(\", \")}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport './Header.css';\r\n\r\nexport default ({black}) => {\r\n    return (\r\n        <header className={black ? 'black' : ''}>\r\n            <div className=\"header--logo\">\r\n                <a href=\"/\">\r\n                    <img alt=\"Netflix\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/2560px-Netflix_2015_logo.svg.png\" />\r\n                </a>\r\n            </div>\r\n            <div className=\"header--user\">\r\n                <a href=\"\">\r\n                    <img alt=\"Usuário\" src=\"https://i.pinimg.com/474x/b6/77/cd/b677cd1cde292f261166533d6fe75872.jpg\" />\r\n                </a>\r\n            </div>\r\n        </header>\r\n    )\r\n}","import React, { useEffect, useState } from \"react\";\nimport Tmdb from \"./Tmdb\";\nimport MovieRow from \"./components/MovieRow\";\nimport FeatureMovie from \"./components/FeatureMovie\";\nimport Header from \"./components/Header\";\n\nimport \"./App.css\";\n\nexport default () => {\n\n  const [movieList, setMovieList] = useState([]);\n  const [featureData, setFeatureData] = useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n\n  useEffect(() => {\n    const LoadAll = async () => {\n      // Pegando a lista TOTAL\n      let list = await Tmdb.getHomeList();\n      setMovieList(list);\n\n      //Pegando o Featured\n      let originals = list.filter((i) => i.slug === \"trending\");\n      let randomChosen = Math.floor(\n        Math.random() * (originals[0].items.results.length - 1)\n      );\n      let chosen = originals[0].items.results[randomChosen];\n\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, chosen.media_type);\n      setFeatureData(chosenInfo);\n    };\n\n    LoadAll();\n  }, []);\n\n  useEffect(()=> {\n    const scrollListener = () => {\n      if(window.scrollY > 10) {\n        setBlackHeader(true);\n      }else {\n        setBlackHeader(false);\n      }\n    }\n    window.addEventListener('scroll', scrollListener);\n    return () => {\n      window.removeEventListener('scroll', scrollListener);\n    }\n  },[]);\n\n  return (\n    <div className=\"page\">\n      <Header black={blackHeader}/>\n\n      {featureData && <FeatureMovie item={featureData} />}\n\n      <section className=\"lists\">\n        {movieList.map((item, key) => (\n          <MovieRow key={key} title={item.title} items={item.items} />\n        ))}\n      </section>\n      <footer>\n        Feito com <span role=\"img\" aria-label=\"coração\">❤️</span> pela B7Web,\n        Direitos de imagem para Netflix <br/>\n        Dados pegos do site Themoviedb.org\n      </footer>\n      {movieList.length <= 0 && \n      <div className=\"loading\">\n        <img src=\"https://media.filmelier.com/noticias/br/2020/03/Netflix_LoadTime.gif\" alt=\"Carregando\"/>\n      </div>\n      }\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}